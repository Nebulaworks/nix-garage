#!/usr/bin/env bash
# vim: ft=sh sw=2 et
# shellcheck shell=bash
set -efo pipefail

registry="docker.io"
nixtop="default.nix"

# shellcheck disable=SC2148
usage(){
  cat << EOF
usage: $(basename "$0") [OPTIONS] ATTR

Check if images are in docker hub and publish if necessary

OPTIONS:
  -h      Show this message
  -f      Set top-level nix file, default.nix otherwise
  -s      Skip pushing to registry

EXAMPLES:
  Leverage release.nix instead of default.nix to publish:

      $(basename "$0") -f release.nix

EOF
}

while getopts "f:hs" OPTION
do
  case $OPTION in
    f )
      nixtop=$OPTARG
      ;;
    h )
      usage
      exit 0
      ;;
    s )
      skip_publish=1
      ;;
    \? )
      usage
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

# Assume that we will pass in attribute path prefix, i.e. imgs
# TODO: This it technically broken for full attribute paths, i.e imgs.awsutils since the
# entry we get from the nix-istantiate gets prefixed with the attribute
attr=${1:-'imgs'}

# For storing all built and published images
BUILT=()

# When using a non-blank ${nixtop} (such as in CI), a new derivation will have to be built
# during the nix-instantiate in the for loop, because it doesn't yet exist. Having --eval
# in the command causes it to fail if the dervivation is not yet there. We do the following
# without --eval and direct its output to /dev/null only as a "pre-populate" step to build
# the derivation as a work around.
# TODO: There might be a better way to "pre-generate" the derivation for ci, consider replacing
nix-instantiate --strict --json -A $attr $nixtop &> /dev/null
ENTRIES=$(nix-instantiate --eval --strict --json -A $attr $nixtop | jq -r 'keys[]' )
for entry in ${ENTRIES[@]}; do
  derivation=$(nix --extra-experimental-features "nix-command flakes" show-derivation -f $nixtop $attr.$entry)
  image_fullname=$(echo $derivation | jq -r '.[] | .env.imageName')
  org=$(echo $image_fullname | cut -d '/' -f 1)
  image_name=$(echo $image_fullname | cut -d '/' -f 2)
  calcout=$(echo $derivation | jq '.[] | .env.out')
  calcout=$(basename ${calcout} | cut -d '-' -f1)
  registry_endpoint="${registry}/${org}/${image_name}:${calcout}"

  # Check if this image is already in the registry and if so continue to next item in the list
  skopeo inspect docker://${registry_endpoint} && continue

  # Skip publishing to registry if this flag is set
  [[ ! -z $skip_publish ]] && echo "Would have published: ${image_name}" && continue
  # I guess we need to build and push this to the registry if weve made it this far
  # We can use the drv here since we dont have the attribute path
  nix-build -A $attr.$entry $nixtop
  skopeo --insecure-policy copy docker-archive:result docker://${registry_endpoint}
  BUILT+=("$image_name:${calcout}")
done

if [ ${#BUILT[@]} -eq 0 ]; then
  echo "Nothing to do"
else
  # Print built images:out comma separated if we built things
  (IFS=,; echo "${BUILT[*]}")
fi
